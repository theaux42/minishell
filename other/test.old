/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tbabou <tbabou@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/11 21:21:41 by tbabou            #+#    #+#             */
/*   Updated: 2024/10/11 23:35:21 by tbabou           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft/libft.h"
#include <stdlib.h>
#include <string.h>

char	*get_env_value(char *key, char **env)
{
	char	**args;
	char	*result;
	int		i;

	if (!env || !key)
		return (NULL);
	i = 0;
	while (env[i])
	{
		if (ft_strncmp(key, env[i], ft_strlen(key) - 1) == 0)
		{
			args = ft_split(env[i], '=');
			if (!args)
				return (NULL);
			result = ft_strdup(args[1]);
			if (!result)
				return (NULL);
			ft_freesplit(args);
			return (result);
		}
		i++;
	}
	return (NULL);
}

int	edit_env_value(char *key, char *value, char **env)
{
	char	**args;
	char	*new_env;
	int		i;

	i = 0;
	while (env[i])
	{
		if (ft_strncmp(env[i], key, ft_strlen(key) - 1) == 0)
		{
			args = ft_split(env[i], '=');
			if (!args)
				return (0);
			new_env = ft_strjoin_double(key, "=", value);
			if (!new_env)
				return (ft_freesplit(args), 0);
			free(env[i]);
			env[i] = new_env;
			return (ft_freesplit(args), 1);
		}
		i++;
	}
	return (0);
}

char	**add_env_value(char *key, char *value, char **env)
{
	int		env_len;
	char	**result;
	char	*line;
	int		i;

	env_len = ft_split_len(env);
	result = malloc(sizeof(char *) * (env_len + 2));
	if (!result)
		return (NULL);
	i = 0;
	while (env[i])
	{
		result[i] = ft_strdup(env[i]);
		if (!result[i])
			return (ft_freesplit(result), NULL);
		i++;
	}
	line = ft_strjoin_double(key, "=", value);
	if (!line)
		return (ft_freesplit(result), NULL);
	result[i] = line;
	result[++i] = NULL;
	return (result);
}

void	set_env_value(char *key, char *value, char ***env)
{
	int		result;
	char	**new_env;

	result = edit_env_value(key, value, *env);
	if (!result)
	{
		new_env = add_env_value(key, value, *env);
		if (!new_env)
			return ;
		ft_freesplit(*env);
		*env = new_env;
	}
}

void	del_env_value(char *key, char ***env)
{
	char	**result;
	int		i;
	int		j;

	result = malloc(sizeof(char *) * (ft_split_len(*env)));
	if (!result)
		return ;
	i = 0;
	j = -1;
	while ((*env)[++j])
	{
		if (ft_strncmp((*env)[j], key, ft_strlen(key) - 1) != 0)
		{
			result[i] = ft_strdup((*env)[j]);
			if (!result[i])
			{
				ft_freesplit(result);
				return ;
			}
			i++;
		}
	}
	result[i] = NULL;
	ft_freesplit(*env);
	*env = result;
}

char	**ft_dupenv(char **env)
{
	int		env_len;
	char	**result;
	int		i;

	env_len = ft_split_len(env);
	result = malloc(sizeof(char *) * (env_len + 1));
	if (!result)
		return (NULL);
	i = 0;
	while (env[i])
	{
		result[i] = ft_strdup(env[i]);
		if (!result[i])
			return (NULL);
		i++;
	}
	result[i] = NULL;
	return (result);
}

int	main(int ac, char **av, char **env)
{
	char *result;
	char **dup_env;
	char **test_env;

	(void)ac;
	(void)av;
	dup_env = ft_dupenv(env);
	if (!dup_env)
		return (0);
	result = get_env_value("PATH", dup_env);
	printf("PATH -> %s\n", result);
	free(result);
	set_env_value("PATH", "Hello", &dup_env);
	result = get_env_value("PATH", dup_env);
	printf("PATH -> %s\n", result);
	free(result);
	result = get_env_value("TEST", dup_env);
	printf("TEST -> %s\n", result);
	free(result);
	set_env_value("TEST", "Hello world", &dup_env);

	result = get_env_value("TEST", dup_env);
	printf("TEST -> %s\n", result);
	free(result);

	result = get_env_value("PATH", dup_env);
	printf("PATH -> %s\n", result);
	free(result);

	del_env_value("TEST", &dup_env);

	result = get_env_value("TEST", dup_env);
	printf("TEST -> %s\n", result);
	free(result);

	set_env_value("TEST", "Hello world", &dup_env);

	result = get_env_value("TEST", dup_env);
	printf("TEST -> %s\n", result);
	free(result);
	del_env_value("TEST", &dup_env);

	result = get_env_value("TEST", dup_env);
	printf("TEST -> %s\n", result);
	free(result);

	set_env_value("TEST", "Hello world", &dup_env);

	result = get_env_value("TEST", dup_env);
	printf("TEST -> %s\n", result);
	free(result);

	ft_freesplit(dup_env);
	return (0);
}